<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2018-9-12-论文笔记-Semi-Supervised Deep Learning for Monocular Depth Map Prediction</title>
      <link href="/2018/09/03/2018-9-12-%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Semi-Supervised%20Deep%20Learning%20for%20Monocular%20Depth%20Map%20Prediction.html"/>
      <url>/2018/09/03/2018-9-12-%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Semi-Supervised%20Deep%20Learning%20for%20Monocular%20Depth%20Map%20Prediction.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文分析了论文：Semi-Supervised Deep Learning for Monocular Depth Map Prediction<br><a id="more"></a>。</p></blockquote><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul><li>提出了一个半监督的深度估计算法：有监督loss + 无监督loss。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>激光雷达数据的问题：<ul><li>稀疏</li><li>噪声的影响</li><li>标定不准确的影响</li></ul></li><li>有监督loss 和 无监督loss：<ul><li>使用激光雷达获取的稀疏的有效点做有监督loss训练。smooth_l1。</li><li>使用其它的像素点构建无监督loss。通过左右图像 + warp一致构建loss。</li><li>为了保证边缘的锐利度，根据边缘有构建了一个loss。</li></ul></li><li></li><li><p>算法框架和无监督的双目算法基本一致，只是加了有监督loss，变成了半监督算法。<br><img src="https://www.github.com/xuezhisd/xuezhisd.github.io.img/raw/dev/imgs/1536709268593.png" alt="算法框架"></p></li><li>损失函数没有什么新意，在其他论文中都有出现。不管是有监督的smooth_l1，还是无监督loss。</li><li>评价准则也是常用的评价方法。</li><li><del>~除了半监督，没啥新奇的地方。</del>~</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/Yevkuzn/semodepth" target="_blank" rel="noopener">代码</a></li><li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935252" target="_blank" rel="noopener">论文笔记-深度估计(1)Depth Map Prediction from a Single Image using a Multi-Scale Deep Network</a></li><li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935650" target="_blank" rel="noopener">论文笔记-深度估计(2) Fully Convolutional Networks for Semantic Segmentation</a></li><li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935659" target="_blank" rel="noopener">论文笔记-深度估计(3)Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale…</a></li><li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78937773" target="_blank" rel="noopener">论文笔记-深度估计(4) Semi-Supervised Deep Learning for Monocular Depth Map Prediction</a></li></ul>]]></content>
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-9-11-NYU Depth v2数据库相关信息</title>
      <link href="/2018/09/02/2018-9-11-NYU%20Depth%20v2%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF.html"/>
      <url>/2018/09/02/2018-9-11-NYU%20Depth%20v2%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了：<br><a id="more"></a></p></blockquote><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>NYU Depth V2</p><p>链接</p><h2 id="Indoor-Segmentation-and-Support-Inference-from-RGBD-Images"><a href="#Indoor-Segmentation-and-Support-Inference-from-RGBD-Images" class="headerlink" title="Indoor Segmentation and Support Inference from RGBD Images"></a>Indoor Segmentation and Support Inference from RGBD Images</h2><ul><li>贡献：NYU数据集</li><li>主页：<a href="https://cs.nyu.edu/~silberman/projects/indoor_scene_seg_sup.html" target="_blank" rel="noopener">https://cs.nyu.edu/~silberman/projects/indoor_scene_seg_sup.html</a></li></ul><h2 id="Predicting-Depth-Surface-Normals-and-Semantic-Labels-with-a-Common-Multi-Scale-Convolutional-Architecture"><a href="#Predicting-Depth-Surface-Normals-and-Semantic-Labels-with-a-Common-Multi-Scale-Convolutional-Architecture" class="headerlink" title="Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale Convolutional Architecture"></a>Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale Convolutional Architecture</h2><h2 id="Depth-Map-Prediction-from-a-Single-Image-using-a-Multi-Scale-Deep-Network"><a href="#Depth-Map-Prediction-from-a-Single-Image-using-a-Multi-Scale-Deep-Network" class="headerlink" title="Depth Map Prediction from a Single Image using a Multi-Scale Deep Network"></a>Depth Map Prediction from a Single Image using a Multi-Scale Deep Network</h2><ul><li>Eigen 论文切分方法</li><li>使用数据库：NYU Depth V2和KITTI</li><li>融合全局和局部信息，提高鲁棒性。本文通过coarse net估计全局depth结构，在更大分辨率上refine。</li><li><p>贡献：</p><ul><li><ol><li>由粗到细的策略。两个网络，粗网络使用全局特征，估计全局结构；精细网络使用局部特征，refine结果。</li></ol></li><li><ol start="2"><li>提出尺度无关的误差。</li></ol></li></ul></li><li><p>464个场景，249个作为训练集，215个作为测试集。</p></li><li>使用NYU Raw，构建训练集。</li><li>分辨率下采样1/2。（640x480→320x240）</li><li>由于RGB图和depth图采样频率不一致，需要做时间同步。（把一个图像对应多个depth的样本删除）。</li><li>使用相机参数对齐RGB图和depth图。</li><li>没有深度信息的像素点 mask掉。</li><li>为了去除窗子，开着的门和光谱引起的无效区域，也mask掉等于最小值和最大值的区域。</li><li>训练集有120K图像，经过均匀化每个场景的样本量，得到220K图像。1200 * 249=298800。</li><li>2M 训练coarse net；</li><li>1.5M 训练fine net；</li><li>batch_size：32</li><li><p>SGD优化算法；lr=0.001</p></li><li><p>Kitti Raw</p><ul><li>56个场景，28用于训练，28个用于测试。</li><li>每个场景有800张图像；去除汽车静止的图片，避免重复。</li><li>左右摄像头数据都使用了，但不做关联。</li><li>训练集有20K图像，经过均匀化每个场景的样本量，扩充至40K。</li></ul></li><li><p>使用最近邻上采样，将预测的低分辨率输出 还原到 原始分辨率。</p></li><li><p>切分带标签的数据集</p><ul><li>train:795</li><li>test:654</li><li><a href="https://github.com/janivanecky/Depth-Estimation/tree/master/dataset" target="_blank" rel="noopener">https://github.com/janivanecky/Depth-Estimation/tree/master/dataset</a></li></ul></li><li><p>评价指标如下所示：<br><img src="https://www.github.com/xuezhisd/xuezhisd.github.io.img/raw/dev/imgs/1536671720648.png" alt="enter description here"></p></li></ul>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-9-11-配置小书匠的hexo blog模板</title>
      <link href="/2018/09/02/2018-9-11-%E9%85%8D%E7%BD%AE%E5%B0%8F%E4%B9%A6%E5%8C%A0%E7%9A%84hexo%20blog%E6%A8%A1%E6%9D%BF.html"/>
      <url>/2018/09/02/2018-9-11-%E9%85%8D%E7%BD%AE%E5%B0%8F%E4%B9%A6%E5%8C%A0%E7%9A%84hexo%20blog%E6%A8%A1%E6%9D%BF.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了：<strong>如何配置小书匠的模板，适用于hexo blog。</strong><br><a id="more"></a></p></blockquote><h2 id="模板内容"><a href="#模板内容" class="headerlink" title="模板内容"></a>模板内容</h2><ul><li>按照以下填写模板，即可。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &lt;%<span class="ruby"> print((new Date()).getFullYear().toString()+ <span class="string">'-'</span>+ ((new Date()).getMonth() + <span class="number">1</span>).toString() + <span class="string">'-'</span>+ (new Date()).getDate().toString()); </span>%&gt;<span class="bullet">-未命名</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet"> -</span> <span class="string">新建</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet"> -</span> <span class="string">未分类</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">张学志</span></span><br><span class="line"><span class="attr">date:</span> &lt;%<span class="ruby"> print((new Date()).getFullYear().toString()+ <span class="string">'-'</span>+ ((new Date()).getMonth() + <span class="number">1</span>).toString() + <span class="string">'-'</span>+ (new Date()).getDay().toString() + <span class="string">' '</span> + (new Date()).getHours().toString() + <span class="string">':'</span> + (new Date()).getMinutes().toString() + <span class="string">':'</span> + (new Date()).getSeconds().toString()); </span>%&gt;</span><br><span class="line"><span class="attr">grammar_cjkRuby:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&gt; 本文描述了：</span></span><br><span class="line"><span class="string">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>更新不保存？</li></ul>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小书匠 </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-让jupyter notebook支持python3</title>
      <link href="/2018/04/24/python-%E8%AE%A9jupyter-notebook%E6%94%AF%E6%8C%81python3.html"/>
      <url>/2018/04/24/python-%E8%AE%A9jupyter-notebook%E6%94%AF%E6%8C%81python3.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了如何让jupyter notebook支持python3<br><a id="more"></a></p></blockquote><ul><li>安装完jupyter notebook之后，默认只支持python2。</li><li>其实jupyter还支持非常多的编程语言。点击<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">jupyter kernels list</a>查看jupyter支持哪些语言。</li></ul><h2 id="支持Python-3"><a href="#支持Python-3" class="headerlink" title="支持Python 3"></a>支持Python 3</h2><ul><li>命令行执行下面的命令</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> ipykernel</span><br><span class="line">python3 -m ipykernel <span class="keyword">install</span></span><br></pre></td></tr></table></figure><ul><li>重启jupyter</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></table></figure><ul><li>此时，发现可以新建python3的notebook了。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/8b90c2f12856" target="_blank" rel="noopener">如何让Jupyter Notebook支持多种编程语言？</a></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-为Python添加默认模块搜索路径</title>
      <link href="/2018/04/21/python-%E4%B8%BAPython%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E6%A8%A1%E5%9D%97%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84.html"/>
      <url>/2018/04/21/python-%E4%B8%BAPython%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E6%A8%A1%E5%9D%97%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了3种<strong>为Python添加模块搜索路径</strong>的方法。<br><a id="more"></a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>总共有三种方法：①函数添加；②修改环境变量；③增加.pth文件。</li></ul><h2 id="一、函数添加"><a href="#一、函数添加" class="headerlink" title="一、函数添加"></a>一、函数添加</h2><ul><li>在<code>Python</code>中或Python文件中执行以下语句，将<code>/home/xuezhi.zhang/libs</code>添加到Python搜索目录中。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print sys.path</span><br><span class="line">sys<span class="selector-class">.path</span><span class="selector-class">.append</span>(<span class="string">"/home/xuezhi.zhang/libs"</span>)</span><br></pre></td></tr></table></figure><h2 id="二、修改环境变量"><a href="#二、修改环境变量" class="headerlink" title="二、修改环境变量"></a>二、修改环境变量</h2><ul><li>用户可以通过修改环境变量PYTHONPATH来添加Python搜索目录。</li><li>将以下内容放到<code>~/.bashrc</code>中，并执行<code>source ~/.bashrc</code>使设置生效。</li><li>作用：将<code>${HOME}/workspace/mxnet/python</code>添加到Python搜索目录。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYTHONPATH</span>=<span class="variable">$&#123;PYTHONPATH&#125;</span>:$&#123;HOME&#125;/workspace/mxnet/python</span><br></pre></td></tr></table></figure><h2 id="三、增加-pth文件"><a href="#三、增加-pth文件" class="headerlink" title="三、增加.pth文件"></a>三、增加.pth文件</h2><ul><li>在site-packages目录中添加一个路径文件（如mypkpath.pth）。<strong>注意：必须以.pth为后缀</strong>。将你要加入的模块文件所在的目录名称写入该文件即可。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/shanql/articles/5477483.html" target="_blank" rel="noopener">为Python添加默认模块搜索路径</a></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-pip更改国内镜像</title>
      <link href="/2018/04/18/python-pip%E6%9B%B4%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.html"/>
      <url>/2018/04/18/python-pip%E6%9B%B4%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了如何在linux上为python配置国内镜像源。<br><a id="more"></a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>更改国内镜像源的原因：</p><ul><li>访问国外镜像速度太慢</li></ul></li><li><p>常见的国内镜像源有两个：</p><ul><li><a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">豆瓣</a></li><li><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">清华</a></li></ul></li><li><p>推荐清华镜像源，因为我之前遇到有的包在豆瓣镜像上没装成功，换成清华镜像源之后，成功地安装了。</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>linux下，修改 <code>~/.pip/pip.con</code>f (没有就创建一个)， 修改 index-url至tuna，内容如下：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://blog.csdn.net/lambert310/article/details/52412059" target="_blank" rel="noopener">更改pip源至国内镜像，显著提升下载速度</a></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件-Clion关联(高亮)cuda代码</title>
      <link href="/2018/04/16/%E8%BD%AF%E4%BB%B6-Clion%E5%85%B3%E8%81%94-%E9%AB%98%E4%BA%AE-cuda%E4%BB%A3%E7%A0%81.html"/>
      <url>/2018/04/16/%E8%BD%AF%E4%BB%B6-Clion%E5%85%B3%E8%81%94-%E9%AB%98%E4%BA%AE-cuda%E4%BB%A3%E7%A0%81.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了如何在Clion中高亮cuda代码。<br><a id="more"></a></p></blockquote><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul><li><p>依次点击：File -&gt; Setting -&gt; Editor -&gt; File Types，打开File Types对话框。</p></li><li><p>在上栏<code>Recognized File Types</code>单击<code>C/C++</code>。在下栏中点击<code>+</code>，将<code>*.cu</code>添加到规则中。</p></li><li><p>点击<code>Apply</code>和<code>OK</code>，使得配置生效。</p></li><li><p>现在cuda代码已经高亮了。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/39980645/enable-code-indexing-of-cuda-in-clion" target="_blank" rel="noopener">Enable code indexing of Cuda in Clion</a></li><li><a href="http://www.jetbrains.com/help/clion/register-new-file-type-association-dialog.html" target="_blank" rel="noopener">Register New File Type Association Dialog</a></li><li><a href="http://www.jetbrains.com/help/clion/creating-and-registering-file-types.html" target="_blank" rel="noopener">Creating a file type</a></li></ul>]]></content>
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Clion </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>运维-使用国内免费CDN加速GitHub Pages</title>
      <link href="/2018/04/15/%E8%BF%90%E7%BB%B4-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%85%8D%E8%B4%B9CDN%E5%8A%A0%E9%80%9FGitHub-Pages.html"/>
      <url>/2018/04/15/%E8%BF%90%E7%BB%B4-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%85%8D%E8%B4%B9CDN%E5%8A%A0%E9%80%9FGitHub-Pages.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了使用国内免费CDN<strong>【加速乐】</strong>来加速GitHub-Pages。<br><a id="more"></a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul><li>我的博客使用github pages服务搭建的。国内访问速度比较慢，因此想到CDN加速。</li></ul><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ul><li>CDN很多，但是好的服务要收费的，比如阿里云。</li><li>在网上找到一些免费的CDN。<a href="https://blog.csdn.net/qq_25281775/article/details/77479785" target="_blank" rel="noopener">《国内9大免费CDN汇总》</a></li><li>本文是使用了上面链接中的第一个：<strong>加速乐</strong>。</li></ul><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ul><li>我的域名<code>xuezhisd.top</code>是在阿里云（万网）购买的。</li></ul><h2 id="配置加速乐"><a href="#配置加速乐" class="headerlink" title="配置加速乐"></a>配置加速乐</h2><h4 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h4><ul><li>点击<a href="https://www.yunaq.com/" target="_blank" rel="noopener">https://www.yunaq.com/</a>，填写邮箱，手机号，密码等注册。</li><li>根据提示，完成邮箱和手机验证。</li></ul><h4 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h4><ul><li>点击右侧面板的<code>域名管理</code>，然后点击<code>添加域名</code>，添加需要CDN加速的域名。</li><li>有两种接入方式，NS和CNAME。由于CNAME需要备案，本文选择使用NS。</li><li>如下图所示，已经添加了<code>xuezhisd.top</code>。</li></ul><p><img src="/images/pasted-1.png" alt="upload successful"></p><ul><li>点击域名<code>xuezhisd.top</code>，添加子域名<code>blog.xuezhisd.top</code>。如下图所示。</li></ul><p><img src="/images/pasted-2.png" alt="upload successful"></p><h4 id="切换DNS"><a href="#切换DNS" class="headerlink" title="切换DNS"></a>切换DNS</h4><ul><li>点击<code>下一步，DNS切换</code>，按照提示，到阿里云上修改DNS。</li></ul><ul><li>在阿里云上，点击<code>DNS修改</code>，将默认的DNS修改为<code>ns1.jiasule.net</code>和<code>ns2.jiasule.net</code>。</li></ul><p><img src="/images/pasted-3.png" alt="upload successful"></p><ul><li>如下图所示，点击<code>立即接入</code>，提示<strong>域名切换成功</strong>。【这需要等几分钟】<br><img src="/images/pasted-4.png" alt="upload successful"></li></ul>]]></content>
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c++-定义类型别名</title>
      <link href="/2018/04/14/c-%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D.html"/>
      <url>/2018/04/14/c-%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了C++中的3种定义“类型别名”的方式。<br><a id="more"></a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>C++定义“类型别名”的3种方式：<ul><li><code>typedef</code></li><li><code>#define</code></li><li><code>using</code></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 原来类型名 新类型名；</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 新类型名 原类型名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> 新类型名 = 原来类型名;</span><br></pre></td></tr></table></figure><h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><ul><li>一般情况下，using与typedef所表述的意思没有区别。但是，涉及到为模板类型设置别名时，就出现差异了。C++编译器不支持使用typedef关键词为模板类设置别名，但是使用using的方式声明一个关键词却是允许的，这是C++11标准才有的。</li><li><code>#define</code>和<code>typedef</code>的异同：<ul><li><code>#define</code>是在程序预处理阶段完成的 ,也叫宏定义；</li><li><code>#typedef</code>是在编译的时候完成的;后者更为灵活方便；</li><li><code>#define</code>在处理指针方面处理不好,<code>typedef</code>处理更加合适。</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/qq_29924041/article/details/54588487" target="_blank" rel="noopener">类型别名typedef与#define</a></li><li><a href="https://www.cnblogs.com/yutongqing/p/6794652.html" target="_blank" rel="noopener">使用using与typedef来定义别名</a></li></ul>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c++-单例模式</title>
      <link href="/2018/04/14/c-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
      <url>/2018/04/14/c-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了单例模式的基本概念和一个例子。<br><a id="more"></a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>Singleton 是对全局变量的取代策略。</li><li>作用：保证一个类只能有一个实例，并提供一个全局唯一的访问点。<ul><li>仅有一个实例：通过类的静态成员变量来体现。</li><li>提供访问它的全局访问点：访问静态成员变量的静态成员函数来体现。</li></ul></li><li>定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</li><li>唯一实例类Singleton在静态成员函数中隐藏创建实例的操作。</li><li>特征：<ul><li>它有一个指向唯一实例的静态指针，并且是私有的；</li><li>它有一个公有的函数，可以获取这个唯一的实例，并且在需要的时候创建该实例；</li><li>它的构造函数是私有的，这样就不能从别处创建该类的实例。</li></ul></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>单例类的头文件：<code>Singleton.h</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SINGLETON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SINGLETON_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> Singleton* pInstance; <span class="comment">//静态成员，保存对象的唯一实例</span></span><br><span class="line">  Singleton(); <span class="comment">//私有化构造函数，使其无法在类外实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton* <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED_SINGLETON_H</span></span></span><br></pre></td></tr></table></figure><ul><li>单例类的实现文件：<code>Singleton.pp</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::pInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Singleton..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::Instance() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> == pInstance)</span><br><span class="line">    pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="keyword">return</span> pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::Destroy() &#123;</span><br><span class="line">  <span class="keyword">delete</span> pInstance;</span><br><span class="line">  pInstance = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用文件：<code>main.h</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Singleton* ps = Singleton::Instance();</span><br><span class="line">  Singleton::Destroy();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/jiese/p/3158517.html" target="_blank" rel="noopener">C++设计模式-Singleton</a></li></ul>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>testing</title>
      <link href="/2018/04/14/test.html"/>
      <url>/2018/04/14/test.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了单例模式的基本概念和一个例子。<br><a id="more"></a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>Singleton 是对全局变量的取代策略。</li><li>作用：保证一个类只能有一个实例，并提供一个全局唯一的访问点。<ul><li>仅有一个实例：通过类的静态成员变量来体现。</li><li>提供访问它的全局访问点：访问静态成员变量的静态成员函数来体现。</li></ul></li><li>定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</li><li>唯一实例类Singleton在静态成员函数中隐藏创建实例的操作。</li><li>特征：<ul><li>它有一个指向唯一实例的静态指针，并且是私有的；</li><li>它有一个公有的函数，可以获取这个唯一的实例，并且在需要的时候创建该实例；</li><li>它的构造函数是私有的，这样就不能从别处创建该类的实例。</li></ul></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>单例类的头文件：<code>Singleton.h</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SINGLETON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SINGLETON_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> Singleton* pInstance; <span class="comment">//静态成员，保存对象的唯一实例</span></span><br><span class="line">  Singleton(); <span class="comment">//私有化构造函数，使其无法在类外实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton* <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED_SINGLETON_H</span></span></span><br></pre></td></tr></table></figure><ul><li>单例类的实现文件：<code>Singleton.pp</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::pInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Singleton..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::Instance() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> == pInstance)</span><br><span class="line">    pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="keyword">return</span> pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::Destroy() &#123;</span><br><span class="line">  <span class="keyword">delete</span> pInstance;</span><br><span class="line">  pInstance = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用文件：<code>main.h</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Singleton* ps = Singleton::Instance();</span><br><span class="line">  Singleton::Destroy();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/jiese/p/3158517.html" target="_blank" rel="noopener">C++设计模式-Singleton</a></li></ul>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c++-工厂模式</title>
      <link href="/2018/04/13/c-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
      <url>/2018/04/13/c-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了c++工厂模式基本概念和一个例子。<br><a id="more"></a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。又叫虚拟构造子（Virtual Constructor）模式或者多态性工厂（Polymorphic Factory）模式。 </li><li>工厂模式的好处：工厂模式就相当于创建实例对象的new。工厂模式也是用来创建实例对象的，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。</li><li>通常我们都要在创建sample实例时做点初始化的工作。</li><li>需要将创建实例的工作与使用实例的工作分开, 也就是说，让创建实例所需要的大量初始化工作从Sample的构造函数中分离出去。</li><li>工厂模式是一个创建性的模式，他要求工厂类和产品类分开，由一个工厂类可以根据传入的参量决定创建出哪一种产品类的实例。但这些不同的实例有共同的父类</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>文件：<code>main.cpp</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHuman</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  IHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~IHuman()</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  WhiteHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~WhiteHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  YellowHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~YellowHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BlackHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~BlackHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHumanFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  IHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~IHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> IHuman* <span class="title">CreateHuman</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  WhiteHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~WhiteHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WhiteHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  YellowHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~YellowHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> YellowHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BlackHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~BlackHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BlackHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造黄种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory = <span class="keyword">new</span> YellowHumanFactory();</span><br><span class="line">  IHuman * pHuman = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造白种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory2 = <span class="keyword">new</span> WhiteHumanFactory();</span><br><span class="line">  IHuman * pHuman2 = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman2;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory2;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造黑种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory3 = <span class="keyword">new</span> BlackHumanFactory();</span><br><span class="line">  IHuman * pHuman3 = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman3;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory3;</span><br><span class="line"></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/onlycxue/p/3428075.html" target="_blank" rel="noopener">c++工厂模式 (Factory method)</a></li><li><a href="https://blog.csdn.net/hahaha777527/article/details/50965621" target="_blank" rel="noopener">C++设计模式之工厂方法模式（Factory Method）</a></li></ul>]]></content>
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用shadowsocksR访问google scholar</title>
      <link href="/2018/04/13/%E4%BD%BF%E7%94%A8shadowsocks%E8%AE%BF%E9%97%AEgoogle-scholar.html"/>
      <url>/2018/04/13/%E4%BD%BF%E7%94%A8shadowsocks%E8%AE%BF%E9%97%AEgoogle-scholar.html</url>
      <content type="html"><![CDATA[<blockquote><p>本文描述了如何在windows下，使用shadowsocks，SwitchyOmega和chrome实现访问google scholar等网站。<br><a id="more"></a></p></blockquote><h2 id="获取shadowsocksR账号"><a href="#获取shadowsocksR账号" class="headerlink" title="获取shadowsocksR账号"></a>获取shadowsocksR账号</h2><ul><li><p>获取的方法有以下几种：</p><ul><li>网上搜索免费账号</li><li>网上购买shadowsocksR账号</li><li>网上购买vps，自行搭建shadowsocksR服务器</li></ul></li><li><p>推荐第三种：购买vps，自己搭建。</p></li><li><p>VPS推荐，10$左右/年  <a href="https://www.alpharacks.com" target="_blank" rel="noopener">alpharacks</a></p></li><li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocksR-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">一键安装脚本</a></li><li><a href="https://www.dz9.net/blog/4246.html" target="_blank" rel="noopener">BBR加速</a></li></ul><h2 id="安装shadowsocksR"><a href="#安装shadowsocksR" class="headerlink" title="安装shadowsocksR"></a>安装shadowsocksR</h2><ul><li>下载。<a href="https://github.com/xuezhisd/ShadowsocksR-4.1.5-win/" target="_blank" rel="noopener">下载地址</a></li><li>安装。</li><li>配置。将上一步得到的账号IP，密码，端口号等配置好。</li></ul><h2 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h2><ul><li>这一步比较简单，直接忽略。</li></ul><h2 id="安装SwitchyOmega"><a href="#安装SwitchyOmega" class="headerlink" title="安装SwitchyOmega"></a>安装SwitchyOmega</h2><ul><li>SwitchyOmega是chrome的一个插件，用作代理。</li><li>直接访问<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">Chrome 网上应用店</a>安装即可。</li></ul><h2 id="设置SwitchyOmega"><a href="#设置SwitchyOmega" class="headerlink" title="设置SwitchyOmega"></a>设置SwitchyOmega</h2><ul><li>新建情景模式，如下图进行设置</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代理协议：SOCKS5</span><br><span class="line">代理服务器：<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">代理端口：<span class="number">1080</span></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-0.png" alt="upload successful"></p><ul><li>现在就可以成功地访问google scholar等网站了。</li></ul>]]></content>
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
